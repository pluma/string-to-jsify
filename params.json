{"name":"string-to-jsify","tagline":"loads arbitrary text files as node modules","body":"# Synopsis\r\n\r\n**string-to-jsify** is a [browserify](https://github.com/substack/node-browserify) transform that allows you to load arbitrary text files as node modules.\r\n\r\nThis library uses [browserify-transform-tools](https://github.com/benbria/browserify-transform-tools), so you can also supply the configuration by adding a `string-to-jsify` field to your project's `package.json` file.\r\n\r\n[![stability 3 - stable](http://b.repl.ca/v1/stability-3_--_stable-yellowgreen.png)](http://nodejs.org/api/documentation.html#documentation_stability_index) [![license - Unlicense](http://b.repl.ca/v1/license-Unlicense-lightgrey.png)](http://unlicense.org/) [![Flattr this](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=pluma&url=https://github.com/pluma/string-to-jsify)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/string-to-jsify.png?branch=master)](https://travis-ci.org/pluma/string-to-jsify) [![Coverage Status](https://coveralls.io/repos/pluma/string-to-jsify/badge.png?branch=master)](https://coveralls.io/r/pluma/string-to-jsify?branch=master) [![Dependencies](https://david-dm.org/pluma/string-to-jsify.png?theme=shields.io)](https://david-dm.org/pluma/string-to-jsify)\r\n\r\n[![NPM status](https://nodei.co/npm/string-to-jsify.png?compact=true)](https://npmjs.org/package/string-to-jsify)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install string-to-jsify\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/string-to-jsify.git\r\ncd string-to-jsify\r\nnpm install\r\nmake test\r\n```\r\n\r\n# Basic usage example\r\n\r\n## example/partial.html\r\n\r\n```html\r\n<blink>wat</blink>\r\n```\r\n\r\n## example/app.js\r\n\r\n```javascript\r\nvar partial = require('./partial.html');\r\n// ...\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    str2jsify = require('string-to-jsify'),\r\n    b = browserify('./example/app.js');\r\n\r\nb.transform(str2jsify.configure({extensions: '.html'}));\r\nb.bundle().pipe(require('fs').createWriteStream('bundle.js'));\r\n```\r\n\r\n## Usage with package.json\r\n\r\n### package.json\r\n\r\n```json\r\n{\r\n    \"name\": \"my-awesome-project\",\r\n    \"devDependencies\": {\r\n        \"browserify\": \"*\",\r\n        \"string-to-jsify\": \"*\"\r\n    },\r\n    \"string-to-jsify\": {\r\n        \"extensions\": [\".html\", \".txt\"],\r\n        \"patterns\": [\"/^README(\\.[a-z]+)?$/i\", \"[a-z]+\\.md\"]\r\n    }\r\n}\r\n```\r\n\r\n### Usage (API)\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    str2jsify = require('string-to-jsify'),\r\n    b = browserify('./example/app.js');\r\n\r\nb.transform(str2jsify);\r\nb.bundle().pipe(require('fs').createWriteStream('bundle.js'));\r\n```\r\n\r\n### Usage (Shell)\r\n\r\n```sh\r\nbrowserify -t string-to-jsify ./example/app.js > bundle.js\r\n```\r\n\r\n# API\r\n\r\n## str2jsify.configure(opts)\r\n\r\nCreates a browserify transform that will only be applied to files with names\r\nmatching any of the given options (if the value is not an array, it will be wrapped in one automatically).\r\n\r\n### opts.patterns\r\n\r\nAn array of regular expressions or strings representing regular expressions that will be applied to the filename, e.g. `/^text-/i`, `\"/^text-/i\"` or simply `\"^text-\"`.\r\n\r\n### opts.extensions\r\n\r\nAn array of file extensions, e.g. `.txt` or `.html`.\r\n\r\n### opts.filenames\r\n\r\nAn array of file names, e.g. `README.md`.\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/string-to-jsify/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}